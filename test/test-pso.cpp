/*
 * MIT License
 *
 * Copyright (c) 2023 BjÃ¶rnborg Nguyen
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include "gnuplot-iostream.h"

#include "tinypso.hpp"

Eigen::ArrayXd gaussianMembershipFunction(Eigen::ArrayXd const x, Eigen::ArrayXd const &a_position)
{
  // 2023-09-04 10:37:14 bb | Individual data,
  // 0: amplitude
  // 1: timeshift (statistical mean)
  // 2: variance

  double const amp = a_position.x();
  double const mu = a_position.y();
  double const variance = a_position.z();
  Eigen::ArrayXd val{amp * Eigen::exp(-(x - mu).square() / (2 * variance))};

  return val;
}

Eigen::ArrayXd superpositionGaussians(Eigen::ArrayXd const x, Eigen::MatrixXd const &a_position)
{
  Eigen::ArrayXd y;
  //  = gaussianMembershipFunction(x, a_particle);
  y.resize(x.size());
  y.setZero();
  for (auto const pos : a_position.colwise())
  {
    y += gaussianMembershipFunction(x, pos);
  }
  return y;
}

// Problematic since the data does not contain noise
// TEST_CASE("PSO Curve fitting with normal distributions case 1")
// {
//   Eigen::ArrayXd const x{{0.0, 0.1000, 0.2000, 0.3000, 0.4000, 0.5000, 0.6000, 0.7000, 0.8000, 0.9000, 1.0000, 1.1000, 1.2000, 1.3000, 1.4000, 1.5000, 1.6000, 1.7000, 1.8000, 1.9000, 2.0000, 2.1000, 2.2000, 2.3000, 2.4000, 2.5000, 2.6000, 2.7000, 2.8000, 2.9000, 3.0000, 3.1000, 3.2000, 3.3000, 3.4000, 3.5000, 3.6000, 3.7000, 3.8000, 3.9000, 4.0000, 4.1000, 4.2000, 4.3000, 4.4000, 4.5000, 4.6000, 4.7000, 4.8000, 4.9000, 5.0000, 5.1000, 5.2000, 5.3000, 5.4000, 5.5000, 5.6000, 5.7000, 5.8000, 5.9000, 6.0000, 6.1000, 6.2000, 6.3000, 6.4000, 6.5000, 6.6000, 6.7000, 6.8000, 6.9000, 7.0000, 7.1000, 7.2000, 7.3000, 7.4000, 7.5000, 7.6000, 7.7000, 7.8000, 7.9000, 8.0000, 8.1000, 8.2000, 8.3000, 8.4000, 8.5000, 8.6000, 8.7000, 8.8000, 8.9000, 9.0000, 9.1000, 9.2000, 9.3000, 9.4000, 9.5000, 9.6000, 9.7000, 9.8000, 9.9000, 10.0000}};

//   Eigen::ArrayXd const yRef = {{0.27069, 0.32897, 0.39584, 0.47156, 0.55618, 0.64947, 0.75087, 0.8595, 0.9741, 1.093, 1.2144, 1.3359, 1.4552, 1.5697, 1.6767, 1.7737, 1.8586, 1.9293, 1.9843, 2.0228, 2.0444, 2.0497, 2.0397, 2.0164, 1.9823, 1.9406, 1.8949, 1.8491, 1.8075, 1.7743, 1.7534, 1.7486, 1.7629, 1.7989, 1.8582, 1.9414, 2.0481, 2.1768, 2.3249, 2.4887, 2.6635, 2.8436, 3.0229, 3.1945, 3.3512, 3.4861, 3.5922, 3.6632, 3.6937, 3.6791, 3.6162, 3.503, 3.3391, 3.1254, 2.8645, 2.5604, 2.2182, 1.8443, 1.4458, 1.0307, 0.6072, 0.18381, -0.23114, -0.62969, -1.0044, -1.3488, -1.6571, -1.925, -2.149, -2.3271, -2.4587, -2.544, -2.5849, -2.584, -2.5448, -2.4717, -2.3696, -2.2436, -2.0991, -1.9412, -1.7752, -1.6055, -1.4364, -1.2714, -1.1136, -0.96521, -0.82798, -0.70298, -0.59077, -0.49143, -0.40466, -0.32986, -0.26617, -0.21263, -0.16815, -0.13165, -0.10204, -0.0783, -0.059484, -0.044738, -0.033312}};

//   auto evaluate = [&x, &yRef](Particle const &a_particle) -> double
//   {
//     Eigen::MatrixXd posMat{a_particle.getPosition()};
//     if (posMat.rows() < 3 && posMat.cols() > 0)
//     {
//       std::cerr << "Dimensionality of particle init is incorrect." << std::endl;
//       return 0.0;
//     }
//     // Reconstructed fit
//     auto const y = superpositionGaussians(x, posMat);

//     // Fitness, the larger the better
//     double const fitness{1.0 / (posMat.cols() * std::sqrt((yRef - y).square().mean()))};

//     return fitness;
//   };
//   Eigen::Index optimumCounter;
//   yRef.abs().matrix().maxCoeff(&optimumCounter);

//   std::shared_ptr<PsoSettings> psoSettings = std::make_shared<PsoSettings>();
//   psoSettings->objectiveFunction = evaluate;
//   psoSettings->particleRow = 3; //  dimensionality
//   psoSettings->particleCol = 1; // initial number of bump guesses
//   psoSettings->swarmSize = 10000;
//   psoSettings->posMin = Eigen::ArrayXd{{yRef.matrix().minCoeff(), 0, 0.00001}};
//   psoSettings->posMax = Eigen::ArrayXd{{yRef.matrix().maxCoeff(), (x.tail(1) - x.head(1)).x(), 0.4}};
//   psoSettings->initialGuess = Eigen::ArrayXd{{yRef(optimumCounter), x(optimumCounter), 0.2}};
//   psoSettings->alpha = 1.0;
//   psoSettings->dt = 1.0;
//   psoSettings->speedMax = 1.1;
//   psoSettings->maxInertia = 1.4; // exploration vs exploitation
//   psoSettings->minInertia = 0.3;
//   psoSettings->cognitiveFactor = 3;
//   psoSettings->socialFactor = 4.0 - psoSettings->cognitiveFactor;
//   psoSettings->numSteps = 200;
//   psoSettings->threads = 16;
//   psoSettings->convergeIterations = 30;

//   ParticleSwarmOptimization pso(psoSettings);

//   uint32_t const numSteps{1000};
//   uint32_t const threads{16};
//   Gnuplot gnuplot("");
//   gnuplot << "set term wxt 1 noraise\n";
//   gnuplot << "set title \"Pso curvefitting\"\n";
//   gnuplot << "set grid\n";
//   std::tuple<Eigen::ArrayXd, Eigen::ArrayXd> gnudata = std::forward_as_tuple(x, yRef);
//   gnuplot << "plot"
//           << gnuplot.binFile1d(gnudata, "record", "reference.dat") << "with lines title 'Reference'"
//           << ","
//           << gnuplot.binFile1d(gnudata, "record", "fit.dat") << "with lines title 'Fit'\n";

//   auto plot{
//       [&gnuplot,
//        &gnudata,
//        &x](Particle const &a_particle) -> bool
//       {
//         auto const fitness = a_particle.getBestFitness();

//         std::get<1>(gnudata) = superpositionGaussians(x, std::get<1>(fitness));
//         gnuplot.binFile1d(gnudata, "record", "fit.dat");
//         gnuplot << "replot" << std::endl;
//         return true;
//       }};
//   psoSettings->plotFunction = plot;

//   // Run the optimization and get the results
//   Particle const particle = pso.runOptimization();

//   auto const fitness = particle.getBestFitness();
//   std::cout
//       << "Best Particle fitness  = " << std::get<0>(fitness)
//       << "\n"
//       << std::get<1>(fitness)
//       << std::endl;
//   // Solution
//   // 2023-09-04 10:37:14 bb | Individual data,
//   // 0: amplitude
//   // 1: timeshift (statistical mean)
//   // 2: variance

//   // Solution
//   // 2023-09-04 10:37:14 bb | Individual data,
//   // 0: amplitude
//   // 1: timeshift (statistical mean)
//   // 2: variance

//   // y0 = 2 * gaussmf(x, [1 2]);
//   // y1 = 4 * gaussmf(x, [1 5]);
//   // y2 = -3 * gaussmf(x, [1 7]);
//   REQUIRE(true);
// }

TEST_CASE("PSO Curve fitting with normal distributions case 1")
{
  Eigen::ArrayXd const x{{0, 0.0010, 0.0020, 0.0030, 0.0040, 0.0050, 0.0060, 0.0070, 0.0080, 0.0090, 0.0100, 0.0110, 0.0120, 0.0130, 0.0140, 0.0150, 0.0160, 0.0170, 0.0180, 0.0190, 0.0200, 0.0210, 0.0220, 0.0230, 0.0240, 0.0250, 0.0260, 0.0270, 0.0280, 0.0290, 0.0300, 0.0310, 0.0320, 0.0330, 0.0340, 0.0350, 0.0360, 0.0370, 0.0380, 0.0390, 0.0400, 0.0410, 0.0420, 0.0430, 0.0440, 0.0450, 0.0460, 0.0470, 0.0480, 0.0490, 0.0500, 0.0510, 0.0520, 0.0530, 0.0540, 0.0550, 0.0560, 0.0570, 0.0580, 0.0590, 0.0600, 0.0610, 0.0620, 0.0630, 0.0640, 0.0650, 0.0660, 0.0670, 0.0680, 0.0690, 0.0700, 0.0710, 0.0720, 0.0730, 0.0740, 0.0750, 0.0760, 0.0770, 0.0780, 0.0790, 0.0800, 0.0810, 0.0820, 0.0830, 0.0840, 0.0850, 0.0860, 0.0870, 0.0880, 0.0890, 0.0900, 0.0910, 0.0920, 0.0930, 0.0940, 0.0950, 0.0960, 0.0970, 0.0980, 0.0990, 0.1000, 0.1010, 0.1020, 0.1030, 0.1040, 0.1050, 0.1060, 0.1070, 0.1080, 0.1090, 0.1100, 0.1110, 0.1120, 0.1130, 0.1140, 0.1150, 0.1160, 0.1170, 0.1180, 0.1190, 0.1200, 0.1210, 0.1220, 0.1230, 0.1240, 0.1250, 0.1260, 0.1270, 0.1280, 0.1290, 0.1300, 0.1310, 0.1320, 0.1330, 0.1340, 0.1350, 0.1360, 0.1370, 0.1380, 0.1390, 0.1400, 0.1410, 0.1420, 0.1430, 0.1440, 0.1450, 0.1460, 0.1470, 0.1480, 0.1490, 0.1500, 0.1510, 0.1520, 0.1530, 0.1540, 0.1550, 0.1560, 0.1570, 0.1580, 0.1590, 0.1600, 0.1610, 0.1620, 0.1630, 0.1640, 0.1650, 0.1660, 0.1670, 0.1680, 0.1690, 0.1700, 0.1710, 0.1720, 0.1730, 0.1740, 0.1750, 0.1760, 0.1770, 0.1780, 0.1790, 0.1800, 0.1810, 0.1820, 0.1830, 0.1840, 0.1850, 0.1860, 0.1870, 0.1880, 0.1890, 0.1900, 0.1910, 0.1920, 0.1930, 0.1940, 0.1950, 0.1960, 0.1970, 0.1980, 0.1990, 0.2000, 0.2010, 0.2020, 0.2030, 0.2040, 0.2050, 0.2060, 0.2070, 0.2080, 0.2090, 0.2100, 0.2110, 0.2120, 0.2130, 0.2140, 0.2150, 0.2160, 0.2170, 0.2180, 0.2190, 0.2200, 0.2210, 0.2220, 0.2230, 0.2240, 0.2250, 0.2260, 0.2270, 0.2280, 0.2290, 0.2300, 0.2310, 0.2320, 0.2330, 0.2340, 0.2350, 0.2360, 0.2370, 0.2380, 0.2390, 0.2400, 0.2410, 0.2420, 0.2430, 0.2440, 0.2450, 0.2460, 0.2470, 0.2480, 0.2490, 0.2500, 0.2510, 0.2520, 0.2530, 0.2540, 0.2550, 0.2560, 0.2570, 0.2580, 0.2590, 0.2600, 0.2610, 0.2620, 0.2630, 0.2640, 0.2650, 0.2660, 0.2670, 0.2680, 0.2690, 0.2700, 0.2710, 0.2720, 0.2730, 0.2740, 0.2750, 0.2760, 0.2770, 0.2780, 0.2790, 0.2800, 0.2810, 0.2820, 0.2830, 0.2840, 0.2850, 0.2860, 0.2870, 0.2880, 0.2890, 0.2900, 0.2910, 0.2920, 0.2930, 0.2940, 0.2950, 0.2960, 0.2970, 0.2980, 0.2990, 0.3000, 0.3010, 0.3020, 0.3030, 0.3040, 0.3050, 0.3060, 0.3070, 0.3080, 0.3090, 0.3100, 0.3110, 0.3120, 0.3130, 0.3140, 0.3150, 0.3160, 0.3170, 0.3180, 0.3190, 0.3200, 0.3210, 0.3220, 0.3230, 0.3240, 0.3250, 0.3260, 0.3270, 0.3280, 0.3290, 0.3300, 0.3310, 0.3320, 0.3330, 0.3340, 0.3350, 0.3360, 0.3370, 0.3380, 0.3390, 0.3400, 0.3410, 0.3420, 0.3430, 0.3440, 0.3450, 0.3460, 0.3470, 0.3480, 0.3490, 0.3500, 0.3510, 0.3520, 0.3530, 0.3540, 0.3550, 0.3560, 0.3570, 0.3580, 0.3590, 0.3600, 0.3610, 0.3620, 0.3630, 0.3640, 0.3650, 0.3660, 0.3670, 0.3680, 0.3690, 0.3700, 0.3710, 0.3720, 0.3730, 0.3740, 0.3750, 0.3760, 0.3770, 0.3780, 0.3790, 0.3800, 0.3810, 0.3820, 0.3830, 0.3840, 0.3850, 0.3860, 0.3870, 0.3880, 0.3890, 0.3900, 0.3910, 0.3920, 0.3930, 0.3940, 0.3950, 0.3960, 0.3970, 0.3980, 0.3990, 0.4000, 0.4010, 0.4020, 0.4030, 0.4040, 0.4050, 0.4060, 0.4070, 0.4080, 0.4090, 0.4100, 0.4110, 0.4120, 0.4130, 0.4140, 0.4150, 0.4160, 0.4170, 0.4180, 0.4190, 0.4200, 0.4210, 0.4220, 0.4230, 0.4240, 0.4250, 0.4260, 0.4270, 0.4280, 0.4290, 0.4300, 0.4310, 0.4320, 0.4330, 0.4340, 0.4350, 0.4360, 0.4370, 0.4380, 0.4390, 0.4400, 0.4410, 0.4420, 0.4430, 0.4440, 0.4450, 0.4460, 0.4470, 0.4480, 0.4490, 0.4500, 0.4510, 0.4520, 0.4530, 0.4540, 0.4550, 0.4560, 0.4570, 0.4580, 0.4590, 0.4600, 0.4610, 0.4620, 0.4630, 0.4640, 0.4650, 0.4660, 0.4670, 0.4680, 0.4690, 0.4700, 0.4710, 0.4720, 0.4730, 0.4740, 0.4750, 0.4760, 0.4770, 0.4780, 0.4790, 0.4800, 0.4810, 0.4820, 0.4830, 0.4840, 0.4850, 0.4860, 0.4870, 0.4880, 0.4890, 0.4900, 0.4910, 0.4920, 0.4930, 0.4940, 0.4950, 0.4960, 0.4970, 0.4980, 0.4990, 0.5000, 0.5010, 0.5020, 0.5030, 0.5040, 0.5050, 0.5060, 0.5070, 0.5080, 0.5090, 0.5100, 0.5110, 0.5120, 0.5130, 0.5140, 0.5150, 0.5160, 0.5170, 0.5180, 0.5190, 0.5200, 0.5210, 0.5220, 0.5230, 0.5240, 0.5250, 0.5260, 0.5270, 0.5280, 0.5290, 0.5300, 0.5310, 0.5320, 0.5330, 0.5340, 0.5350, 0.5360, 0.5370, 0.5380, 0.5390, 0.5400, 0.5410, 0.5420, 0.5430, 0.5440, 0.5450, 0.5460, 0.5470, 0.5480, 0.5490, 0.5500, 0.5510, 0.5520, 0.5530, 0.5540, 0.5550, 0.5560, 0.5570, 0.5580, 0.5590, 0.5600, 0.5610, 0.5620, 0.5630, 0.5640, 0.5650, 0.5660, 0.5670, 0.5680, 0.5690, 0.5700, 0.5710, 0.5720, 0.5730, 0.5740, 0.5750, 0.5760, 0.5770, 0.5780, 0.5790, 0.5800, 0.5810, 0.5820, 0.5830, 0.5840, 0.5850, 0.5860, 0.5870, 0.5880, 0.5890, 0.5900, 0.5910, 0.5920, 0.5930, 0.5940, 0.5950, 0.5960, 0.5970, 0.5980, 0.5990, 0.6000, 0.6010, 0.6020, 0.6030, 0.6040, 0.6050, 0.6060, 0.6070, 0.6080, 0.6090, 0.6100, 0.6110, 0.6120, 0.6130, 0.6140, 0.6150, 0.6160, 0.6170, 0.6180, 0.6190, 0.6200, 0.6210, 0.6220, 0.6230, 0.6240, 0.6250, 0.6260, 0.6270, 0.6280, 0.6290, 0.6300, 0.6310, 0.6320, 0.6330, 0.6340, 0.6350, 0.6360, 0.6370, 0.6380, 0.6390, 0.6400, 0.6410, 0.6420, 0.6430, 0.6440, 0.6450, 0.6460, 0.6470, 0.6480, 0.6490, 0.6500, 0.6510, 0.6520, 0.6530, 0.6540, 0.6550, 0.6560, 0.6570, 0.6580, 0.6590, 0.6600, 0.6610, 0.6620, 0.6630, 0.6640, 0.6650, 0.6660, 0.6670, 0.6680, 0.6690, 0.6700, 0.6710, 0.6720, 0.6730, 0.6740, 0.6750, 0.6760, 0.6770, 0.6780, 0.6790, 0.6800, 0.6810, 0.6820, 0.6830, 0.6840, 0.6850, 0.6860, 0.6870, 0.6880, 0.6890, 0.6900, 0.6910, 0.6920, 0.6930, 0.6940, 0.6950, 0.6960, 0.6970, 0.6980, 0.6990, 0.7000, 0.7010, 0.7020, 0.7030, 0.7040, 0.7050, 0.7060, 0.7070, 0.7080, 0.7090, 0.7100, 0.7110, 0.7120, 0.7130, 0.7140, 0.7150, 0.7160, 0.7170, 0.7180, 0.7190, 0.7200, 0.7210, 0.7220, 0.7230, 0.7240, 0.7250, 0.7260, 0.7270, 0.7280, 0.7290, 0.7300, 0.7310, 0.7320, 0.7330, 0.7340, 0.7350, 0.7360, 0.7370, 0.7380, 0.7390, 0.7400, 0.7410, 0.7420, 0.7430, 0.7440, 0.7450, 0.7460, 0.7470, 0.7480, 0.7490, 0.7500, 0.7510, 0.7520, 0.7530, 0.7540, 0.7550, 0.7560, 0.7570, 0.7580, 0.7590, 0.7600, 0.7610, 0.7620, 0.7630, 0.7640, 0.7650, 0.7660, 0.7670, 0.7680, 0.7690, 0.7700, 0.7710, 0.7720, 0.7730, 0.7740, 0.7750, 0.7760, 0.7770, 0.7780, 0.7790, 0.7800, 0.7810, 0.7820, 0.7830, 0.7840, 0.7850, 0.7860, 0.7870, 0.7880, 0.7890, 0.7900, 0.7910, 0.7920, 0.7930, 0.7940, 0.7950, 0.7960, 0.7970, 0.7980, 0.7990, 0.8000, 0.8010, 0.8020, 0.8030, 0.8040, 0.8050, 0.8060, 0.8070, 0.8080, 0.8090, 0.8100, 0.8110, 0.8120, 0.8130, 0.8140, 0.8150, 0.8160, 0.8170, 0.8180, 0.8190, 0.8200, 0.8210, 0.8220, 0.8230, 0.8240, 0.8250, 0.8260, 0.8270, 0.8280, 0.8290, 0.8300, 0.8310, 0.8320, 0.8330, 0.8340, 0.8350, 0.8360, 0.8370, 0.8380, 0.8390, 0.8400, 0.8410, 0.8420, 0.8430, 0.8440, 0.8450, 0.8460, 0.8470, 0.8480, 0.8490, 0.8500, 0.8510, 0.8520, 0.8530, 0.8540, 0.8550, 0.8560, 0.8570, 0.8580, 0.8590, 0.8600, 0.8610, 0.8620, 0.8630, 0.8640, 0.8650, 0.8660, 0.8670, 0.8680, 0.8690, 0.8700, 0.8710, 0.8720, 0.8730, 0.8740, 0.8750, 0.8760, 0.8770, 0.8780, 0.8790, 0.8800, 0.8810, 0.8820, 0.8830, 0.8840, 0.8850, 0.8860, 0.8870, 0.8880, 0.8890, 0.8900, 0.8910, 0.8920, 0.8930, 0.8940, 0.8950, 0.8960, 0.8970, 0.8980, 0.8990, 0.9000, 0.9010, 0.9020, 0.9030, 0.9040, 0.9050, 0.9060, 0.9070, 0.9080, 0.9090, 0.9100, 0.9110, 0.9120, 0.9130, 0.9140, 0.9150, 0.9160, 0.9170, 0.9180, 0.9190, 0.9200, 0.9210, 0.9220, 0.9230, 0.9240, 0.9250, 0.9260, 0.9270, 0.9280, 0.9290, 0.9300, 0.9310, 0.9320, 0.9330, 0.9340, 0.9350, 0.9360, 0.9370, 0.9380, 0.9390, 0.9400, 0.9410, 0.9420, 0.9430, 0.9440, 0.9450, 0.9460, 0.9470, 0.9480, 0.9490, 0.9500, 0.9510, 0.9520, 0.9530, 0.9540, 0.9550, 0.9560, 0.9570, 0.9580, 0.9590, 0.9600, 0.9610, 0.9620, 0.9630, 0.9640, 0.9650, 0.9660, 0.9670, 0.9680, 0.9690, 0.9700, 0.9710, 0.9720, 0.9730, 0.9740, 0.9750, 0.9760, 0.9770, 0.9780, 0.9790, 0.9800, 0.9810, 0.9820, 0.9830, 0.9840, 0.9850, 0.9860, 0.9870, 0.9880, 0.9890, 0.9900, 0.9910, 0.9920, 0.9930, 0.9940, 0.9950, 0.9960, 0.9970, 0.9980, 0.9990, 1.0000}};

  Eigen::ArrayXd const yRef = {{-0.010465, -0.014068, -0.014961, 0.0084837, -0.012984, 0.0076116, -0.023645, -0.0092222, -0.013342, -0.0026869, -0.0015909, -0.010888, 0.0067576, 0.0090125, -0.0088977, -0.0048338, -0.0081905, -0.011412, 0.010303, -0.019633, -0.0046458, 0.00060259, 0.016407, -0.0027417, 0.0066341, -0.0077842, -0.0090857, -0.005041, -0.010095, -0.01519, -0.0032352, 0.0062643, 0.0040391, 0.013362, -0.018324, -0.005872, 0.018271, -0.0035686, 0.011844, -0.01719, -0.013339, 0.0039888, 0.022923, 0.00062556, -0.016095, -0.014183, 0.010716, 0.0039524, -0.0095482, -0.0040887, 0.013186, -0.0082213, 0.0016052, -0.0069765, 0.0058332, 0.00027598, -0.012883, 9.5001e-06, -0.004405, 0.021448, -0.0012222, -0.014415, 0.012747, -0.0074055, 0.020787, 0.011511, 0.023883, 0.0065099, 0.011548, 0.0099224, 0.0055382, 0.00021869, 0.019056, 0.034294, 0.025319, 0.030775, 0.01572, 0.024661, 0.025574, 0.014617, 0.033876, 0.030771, 0.036477, 0.040461, 0.037092, 0.031601, 0.048586, 0.02564, 0.046918, 0.062482, 0.043947, 0.037634, 0.056278, 0.062559, 0.075416, 0.064458, 0.05185, 0.079684, 0.06583, 0.078455, 0.097652, 0.091513, 0.11001, 0.11113, 0.1134, 0.1103, 0.1371, 0.1208, 0.14011, 0.14996, 0.15044, 0.16299, 0.16974, 0.19021, 0.19774, 0.21311, 0.22122, 0.23349, 0.23981, 0.25713, 0.26678, 0.27329, 0.28392, 0.32262, 0.30805, 0.35584, 0.37131, 0.38298, 0.38141, 0.40748, 0.44125, 0.45591, 0.47978, 0.48887, 0.51359, 0.51836, 0.56681, 0.58735, 0.62155, 0.61369, 0.63203, 0.65726, 0.69827, 0.72811, 0.75952, 0.78152, 0.80078, 0.81878, 0.85541, 0.8962, 0.92401, 0.9339, 0.97517, 1.0002, 1.0482, 1.0609, 1.0954, 1.1333, 1.1597, 1.2016, 1.2325, 1.251, 1.2752, 1.3139, 1.3441, 1.3834, 1.4198, 1.4374, 1.4638, 1.5021, 1.5144, 1.5718, 1.5884, 1.62, 1.6604, 1.6677, 1.6945, 1.7351, 1.7643, 1.783, 1.8312, 1.8298, 1.8731, 1.8955, 1.9041, 1.9428, 1.9629, 1.9909, 1.9878, 2.0222, 2.009, 2.0471, 2.0844, 2.0918, 2.0948, 2.0953, 2.1264, 2.1196, 2.1544, 2.1804, 2.1657, 2.1895, 2.1867, 2.2213, 2.1978, 2.2245, 2.2277, 2.248, 2.2527, 2.2504, 2.2609, 2.2624, 2.2802, 2.2584, 2.2781, 2.2954, 2.295, 2.282, 2.293, 2.308, 2.3297, 2.3229, 2.3171, 2.3275, 2.3401, 2.3308, 2.3465, 2.3555, 2.3605, 2.3758, 2.3734, 2.395, 2.3765, 2.4018, 2.4234, 2.4174, 2.4523, 2.473, 2.4468, 2.4916, 2.5121, 2.5336, 2.5384, 2.5943, 2.5827, 2.6001, 2.6371, 2.6729, 2.6733, 2.7263, 2.755, 2.7909, 2.8025, 2.8232, 2.8694, 2.8897, 2.939, 2.9651, 3.004, 3.0552, 3.0666, 3.106, 3.1474, 3.187, 3.2256, 3.2639, 3.3037, 3.3342, 3.3722, 3.4211, 3.4482, 3.4864, 3.5227, 3.5716, 3.5936, 3.6369, 3.6758, 3.7156, 3.7356, 3.7787, 3.8082, 3.8131, 3.8713, 3.8842, 3.9071, 3.9416, 3.9493, 3.9871, 3.9925, 4.0108, 4.0379, 4.0608, 4.0601, 4.0662, 4.0773, 4.0816, 4.0879, 4.092, 4.0975, 4.098, 4.0969, 4.0811, 4.0716, 4.0777, 4.0345, 4.0177, 4.0271, 3.998, 3.9705, 3.9661, 3.9228, 3.91, 3.8657, 3.8311, 3.8052, 3.769, 3.708, 3.6761, 3.6371, 3.5993, 3.5475, 3.5104, 3.4545, 3.4062, 3.3562, 3.3001, 3.2558, 3.1998, 3.1229, 3.0705, 3.0192, 2.9651, 2.9034, 2.861, 2.7994, 2.7457, 2.6531, 2.6215, 2.5594, 2.4932, 2.431, 2.3618, 2.2994, 2.2555, 2.1801, 2.1245, 2.0508, 1.9952, 1.9243, 1.884, 1.8377, 1.7628, 1.6938, 1.661, 1.6016, 1.5473, 1.4851, 1.4417, 1.3998, 1.3455, 1.2836, 1.2321, 1.1925, 1.1285, 1.1048, 1.0715, 1.0186, 0.96715, 0.91401, 0.88575, 0.84431, 0.80641, 0.77068, 0.73699, 0.69907, 0.66143, 0.64263, 0.61064, 0.58709, 0.5641, 0.53138, 0.48691, 0.45763, 0.44594, 0.41619, 0.36876, 0.3853, 0.35371, 0.33698, 0.30902, 0.29269, 0.27533, 0.24505, 0.23314, 0.207, 0.22773, 0.22186, 0.18898, 0.15783, 0.16864, 0.14917, 0.1521, 0.1311, 0.1152, 0.094666, 0.10319, 0.080083, 0.076933, 0.0679, 0.057377, 0.036316, 0.056345, 0.02982, 0.036402, 0.026704, -0.010967, 0.018661, -0.015212, -0.028169, -0.0014328, -0.011463, -0.033303, -0.029551, -0.046491, -0.025205, -0.034521, -0.033028, -0.041972, -0.047835, -0.05716, -0.05797, -0.06945, -0.057919, -0.062709, -0.074995, -0.065094, -0.072423, -0.078282, -0.091215, -0.090321, -0.1041, -0.09592, -0.074315, -0.11573, -0.11296, -0.095139, -0.1066, -0.12101, -0.099525, -0.13201, -0.123, -0.12839, -0.15232, -0.13276, -0.15915, -0.14077, -0.13911, -0.15541, -0.16201, -0.17431, -0.16164, -0.17779, -0.18317, -0.1881, -0.18616, -0.17192, -0.18839, -0.19092, -0.21177, -0.21296, -0.20901, -0.22545, -0.21244, -0.23263, -0.2594, -0.2348, -0.24467, -0.23803, -0.26248, -0.25676, -0.27123, -0.27915, -0.27802, -0.29222, -0.27985, -0.3073, -0.31233, -0.31469, -0.32506, -0.32929, -0.33016, -0.33089, -0.34252, -0.3572, -0.36811, -0.36456, -0.37203, -0.38124, -0.3954, -0.40519, -0.40467, -0.42059, -0.41504, -0.43735, -0.45493, -0.44406, -0.46089, -0.45543, -0.48762, -0.48809, -0.50014, -0.5056, -0.50555, -0.52036, -0.52521, -0.5257, -0.56443, -0.54458, -0.57745, -0.57886, -0.59734, -0.60544, -0.62378, -0.62916, -0.61893, -0.6575, -0.65194, -0.67669, -0.68877, -0.68966, -0.69796, -0.70374, -0.71919, -0.74244, -0.7585, -0.77679, -0.78309, -0.80727, -0.79847, -0.8198, -0.83784, -0.84921, -0.85511, -0.86577, -0.88259, -0.91816, -0.90438, -0.94415, -0.94543, -0.9603, -0.99534, -0.99527, -1.0075, -1.0038, -1.0429, -1.0544, -1.0689, -1.0752, -1.0993, -1.1163, -1.1285, -1.1419, -1.1579, -1.1733, -1.1857, -1.2167, -1.2124, -1.2419, -1.242, -1.285, -1.3058, -1.2978, -1.3305, -1.3233, -1.351, -1.3749, -1.3917, -1.4016, -1.4346, -1.4461, -1.4682, -1.4801, -1.5088, -1.5315, -1.555, -1.5699, -1.5645, -1.5692, -1.6075, -1.617, -1.6534, -1.6366, -1.6899, -1.692, -1.7035, -1.7266, -1.7424, -1.765, -1.7908, -1.8153, -1.8304, -1.8241, -1.8653, -1.8866, -1.8925, -1.9189, -1.9296, -1.9572, -1.9718, -2.0078, -1.9875, -2.0148, -2.0209, -2.0634, -2.0856, -2.0784, -2.1116, -2.1257, -2.1399, -2.1445, -2.195, -2.1959, -2.2017, -2.2304, -2.238, -2.2563, -2.2898, -2.3062, -2.3213, -2.3258, -2.3362, -2.3549, -2.3877, -2.4067, -2.4253, -2.4194, -2.4545, -2.4634, -2.4836, -2.4969, -2.4884, -2.5319, -2.5474, -2.5578, -2.5619, -2.5921, -2.5936, -2.6031, -2.6294, -2.6322, -2.6505, -2.6525, -2.6698, -2.6878, -2.699, -2.717, -2.7318, -2.716, -2.7573, -2.7701, -2.7801, -2.8078, -2.7975, -2.7923, -2.8309, -2.8404, -2.846, -2.8281, -2.8459, -2.836, -2.8711, -2.8854, -2.88, -2.8941, -2.9003, -2.8992, -2.9181, -2.9298, -2.9146, -2.9218, -2.9299, -2.9461, -2.9435, -2.9342, -2.9693, -2.9556, -2.9699, -2.9732, -2.9915, -2.9714, -2.9827, -2.9904, -3.0038, -3.0137, -2.9881, -2.99, -3.0168, -3.0064, -3.0048, -2.9828, -3.0166, -2.9969, -2.9971, -2.9953, -3.0033, -2.9881, -2.9829, -2.9943, -2.9924, -2.9777, -2.9939, -2.9683, -2.9699, -2.9837, -2.9814, -2.9631, -2.9563, -2.9856, -2.9448, -2.9436, -2.945, -2.9408, -2.9309, -2.904, -2.909, -2.9122, -2.8934, -2.8861, -2.8836, -2.8686, -2.8752, -2.869, -2.8441, -2.8456, -2.8247, -2.8201, -2.8132, -2.798, -2.7851, -2.7895, -2.7804, -2.7691, -2.7527, -2.7535, -2.7211, -2.7111, -2.697, -2.6856, -2.6778, -2.6505, -2.6544, -2.6281, -2.6233, -2.619, -2.6046, -2.5662, -2.5595, -2.5611, -2.5311, -2.5229, -2.4862, -2.4908, -2.4575, -2.4716, -2.4446, -2.4236, -2.4173, -2.4044, -2.3872, -2.3617, -2.3492, -2.3505, -2.3251, -2.2917, -2.2995, -2.2556, -2.2425, -2.2388, -2.2062, -2.1966, -2.1685, -2.1658, -2.1372, -2.124, -2.1338, -2.1036, -2.0678, -2.0449, -2.0448, -2.0142, -2.0127, -1.979, -1.9737, -1.9453, -1.9238, -1.9094, -1.9005, -1.8742, -1.8535, -1.8307, -1.8361, -1.8085, -1.7656, -1.7662, -1.7268, -1.7576, -1.7172, -1.6771, -1.6667, -1.6678, -1.6378, -1.6186, -1.5894, -1.5777, -1.5751, -1.5298, -1.525, -1.4964, -1.501, -1.4658, -1.4384, -1.4561, -1.414, -1.4162, -1.3987, -1.3762, -1.334, -1.3315, -1.3233, -1.3088, -1.2803, -1.2704, -1.2483, -1.2473, -1.213, -1.2066, -1.1956, -1.171, -1.166, -1.1337, -1.1296, -1.1228, -1.1039, -1.076, -1.0386, -1.041, -1.0329, -1.0294, -0.98519, -0.98218, -0.9699, -0.96678, -0.97003, -0.93099, -0.9022, -0.90111, -0.8918, -0.87506, -0.85527, -0.83524, -0.83204, -0.81939, -0.78609, -0.79029, -0.77705, -0.76594, -0.7633, -0.74326, -0.74375, -0.72211, -0.69063, -0.68884, -0.67538, -0.64707, -0.6732, -0.6535, -0.62683, -0.61242, -0.61955, -0.59383, -0.59438, -0.58882, -0.55408, -0.56017, -0.5758, -0.5493, -0.54582, -0.52337, -0.50063, -0.4838, -0.50552, -0.4783, -0.47828, -0.4886, -0.45842, -0.43066, -0.44333, -0.42762, -0.42954, -0.41632, -0.39832, -0.41098, -0.3841, -0.39547, -0.38009, -0.36808, -0.3584, -0.35742, -0.33586, -0.32793, -0.30981, -0.32645, -0.30474, -0.29835, -0.29905, -0.28112, -0.29684, -0.28691, -0.29922, -0.26608, -0.2574, -0.25046, -0.26145, -0.24274, -0.22112, -0.23377, -0.23417, -0.23233, -0.2214, -0.22615, -0.22238, -0.18439, -0.21352, -0.19895, -0.19496, -0.17989, -0.1756, -0.18366, -0.18682, -0.16427, -0.15337, -0.17268, -0.14583, -0.16009, -0.15369, -0.12562, -0.15198, -0.13561, -0.13962, -0.14737, -0.13823, -0.13301, -0.12885, -0.12098, -0.1226, -0.11119, -0.13016, -0.092609, -0.11132, -0.10671, -0.096952, -0.10704, -0.08456, -0.099551, -0.10517, -0.089645, -0.085504, -0.080385, -0.088335, -0.077338, -0.079318, -0.078773, -0.072624, -0.052674, -0.088014, -0.073418, -0.060395, -0.065769, -0.051917, -0.050657, -0.064071, -0.055234, -0.055304, -0.042879, -0.064047, -0.057461, -0.041661, -0.052281, -0.04624, -0.054333, -0.032087, -0.041255, -0.046875, -0.060601, -0.039044, -0.019621, -0.037746, -0.040299, -0.036032, -0.039712, -0.039069}};

  auto evaluate = [&x, &yRef](Particle const &a_particle) -> double
  {
    Eigen::MatrixXd posMat{a_particle.getPosition()};
    if (posMat.rows() < 3 && posMat.cols() > 0)
    {
      std::cerr << "Dimensionality of particle init is incorrect." << std::endl;
      return 0.0;
    }
    // Reconstructed fit
    auto const y = superpositionGaussians(x, posMat);

    // Fitness, the larger the better
    // double const fitness{1.0 / (std::sqrt(posMat.cols() * (yRef - y).square().mean()))};
    double const fitness{1.0 / (posMat.cols() * std::sqrt((yRef - y).square().mean()))};

    return fitness;
  };
  Eigen::Index optimumCounter;
  yRef.abs().matrix().maxCoeff(&optimumCounter);

  std::shared_ptr<PsoSettings> psoSettings = std::make_shared<PsoSettings>();
  psoSettings->objectiveFunction = evaluate;
  psoSettings->particleRow = 3; //  dimensionality
  psoSettings->particleCol = 1; // initial number of bump guesses
  psoSettings->swarmSize = 10000;
  psoSettings->posMin = Eigen::ArrayXd{{yRef.matrix().minCoeff(), x.minCoeff(), 0.00001}};
  psoSettings->posMax = Eigen::ArrayXd{{yRef.matrix().maxCoeff(), x.maxCoeff(), 0.4}};
  // psoSettings->initialGuess = Eigen::ArrayXd{{yRef(optimumCounter), x(optimumCounter), 0.2}}; // not used
  psoSettings->alpha = 1.0;
  psoSettings->dt = 1.0;
  psoSettings->speedMax = 1.1;
  psoSettings->maxInertia = 1.4; // exploration vs exploitation
  psoSettings->minInertia = 0.3;
  psoSettings->cognitiveFactor = 3;
  psoSettings->inertiaDecay = 0.995; // transforms exploration -> exploitation
  psoSettings->socialFactor = 4.0 - psoSettings->cognitiveFactor;
  psoSettings->numSteps = 200;
  psoSettings->threads = 16;
  psoSettings->convergeIterations = 30;

  ParticleSwarmOptimization pso(psoSettings);

  Gnuplot gnuplot("");
  gnuplot << "set term wxt 1 noraise\n";
  gnuplot << "set title \"Pso curvefitting\"\n";
  gnuplot << "set grid\n";
  std::tuple<Eigen::ArrayXd, Eigen::ArrayXd> gnudata = std::forward_as_tuple(x, yRef);
  gnuplot << "plot"
          << gnuplot.binFile1d(gnudata, "record", "reference.dat") << "with lines title 'Reference'"
          << ","
          << gnuplot.binFile1d(gnudata, "record", "fit.dat") << "with lines title 'Fit'\n";

  auto plot{
      [&gnuplot,
       &gnudata,
       &x](Particle const &a_particle) -> bool
      {
        auto const fitness = a_particle.getBestFitness();

        std::get<1>(gnudata) = superpositionGaussians(x, std::get<1>(fitness));
        gnuplot.binFile1d(gnudata, "record", "fit.dat");
        gnuplot << "replot" << std::endl;
        return true;
      }};
  psoSettings->plotFunction = plot;

  // Run the optimization and get the results
  Particle const particle = pso.runOptimization();

  auto const fitness = particle.getBestFitness();
  std::cout
      << "Best Particle fitness  = " << std::get<0>(fitness)
      << "\n"
      << std::get<1>(fitness)
      << std::endl;
  // Solution
  // 2023-09-04 10:37:14 bb | Individual data,
  // 0: amplitude
  // 1: timeshift (statistical mean)
  // 2: variance

  Eigen::MatrixXd solution(3, 3);
  solution << 2.0, 4.0, -3.0, 0.20, 0.30, 0.7, 0.00159572, 0.00159706, 0.001;
  Eigen::MatrixXd proposal = std::get<1>(fitness);

  double const error{(solution - proposal).cwiseAbs().sum()};
  // Overfitting
  REQUIRE(solution.cols() == 3);
  // Correct solution
  REQUIRE(error < 0.03);
}